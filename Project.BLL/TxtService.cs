//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 04/26/2019 11:17:17 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Project.IBLL;
using Project.IDAL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.BLL
{
    public class TxtService : ITxtService
    {
        private readonly IUnitOfWork _unitOfWork;

        public TxtService(ITxtManage txtManage, IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        ///     新增Txt
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int Insert(Txt entity)
        {
            return _unitOfWork.TxtManage.Insert(entity);
        }

        /// <summary>
        ///     批量新增Txt
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Insert(List<Txt> entitys)
        {
            return _unitOfWork.TxtManage.InsertWithNoTran(entitys);
        }

        /// <summary>
        ///     更新Txt
        /// </summary>
        /// <returns></returns>
        public bool Update(Txt entity)
        {
            return _unitOfWork.TxtManage.Update(entity);
        }

        /// <summary>
        ///     批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Update(List<Txt> entitys)
        {
            return _unitOfWork.TxtManage.UpdateWithNoTran(entitys);
        }

        /// <summary>
        ///     逻辑删除Txt
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool SoftDelete(int id)
        {
            return _unitOfWork.TxtManage.SoftDelete(id);
        }

        /// <summary>
        ///     批量逻辑删除Txt(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public bool SoftDelete(List<int> ids)
        {
            return _unitOfWork.TxtManage.SoftDeleteWithNoTran(ids);
        }

        /// <summary>
        ///     判断Txt是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Exists(int id)
        {
            return _unitOfWork.TxtManage.Exists(id);
        }

        /// <summary>
        ///     根据主键获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Txt GetByPk(int id)
        {
            return _unitOfWork.TxtManage.GetByPk(id);
        }

        /// <summary>
        ///     根据主键获取实体集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<Txt> GetList(List<int> ids)
        {
            return _unitOfWork.TxtManage.GetList(ids);
        }

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        public PageModel<Txt> GetByPage(int page, int size, string sort, TxtCondition condition)
        {
            var dbCondition = new List<DbCondition<Txt>>
            {
                new DbCondition<Txt>
                {
                    IsWhere = condition.Type>0,
                    Expression = o=>o.Type == condition.Type
                }
            };
            return _unitOfWork.TxtManage.GetByPage(page, size, sort, dbCondition);
        }
    }
}
