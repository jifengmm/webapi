//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 03/21/2019 08:57:52 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Project.Core.Utility;
using Project.IBLL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;
using Project.WebApi.Filters;
using Microsoft.AspNetCore.Cors;

namespace Project.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/account")]
    [EnableCors("any")]
    public class AccountController : Controller
    {
        private readonly IAccountService _accountService;

        public AccountController(IAccountService accountService)
        {
            _accountService = accountService;
        }

        [HttpGet("login")]
        public IActionResult UserGet(string loginName, string password)
        {
            var model = _accountService.GetAccount(loginName, Generator.Md5(password));
            if (model == null) return NotFound();
            return Ok(Mapper.Map<LoginUserInfoDto>(model));
        }

        /// <summary>
        ///     添加账号
        /// </summary>
        /// <param name="accountDto">实体</param>
        /// <returns></returns>
        [HttpPost("")]
        [Validate]
        public IActionResult Insert([FromBody] AccountDto accountDto)
        {
            var account = Mapper.Map<Account>(accountDto);
            if (_accountService.ExistLoginName(account.LoginName, null))
            {
                return BadRequest("登陆名已存在");
            }
            account.UserPass = Generator.Md5(string.IsNullOrEmpty(account.UserPass)
                    ? "123456"
                    : account.UserPass);
            return Ok(_accountService.Insert(account));
        }

        /// <summary>
        ///     更新账号
        /// </summary>
        /// <param name="id">主键</param>
        /// <param name="accountDto">实体</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        [Validate]
        public IActionResult Update(int id, [FromBody] AccountDto accountDto)
        {
            if (!_accountService.Exists(id))
            {
                return NotFound();
            }
            var account = _accountService.GetByPk(id);
            var model = Mapper.Map<Account>(accountDto);
            account.EmployeeName = model.EmployeeName;
            account.LoginName = model.LoginName;
            if (_accountService.ExistLoginName(account.LoginName, id))
            {
                return BadRequest("登陆名已存在");
            }
            var result = _accountService.Update(account);
            if (result)
            {
                return Ok();
            }
            return NotFound();
        }

        /// <summary>
        ///     逻辑删除账号
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var result = _accountService.SoftDelete(id);
            if (result)
            {
                return Ok();
            }
            return NotFound();
        }

        /// <summary>
        ///     根据主键Id获取实体
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public IActionResult GetByPk(int id)
        {
            var account = _accountService.GetByPk(id);
            if (account == null)
            {
                return NotFound();
            }
            return Ok(Mapper.Map<AccountDto>(account));
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pi"></param>
        /// <param name="ps"></param>
        /// <param name="condition"></param>
        [HttpGet("get_by_page")]
        public IActionResult GetByPage(int pi, int ps, AccountCondition condition = null)
        {
            var result = _accountService.GetByPage(pi, ps, null, condition);
            return Ok(new
            {
                Total = result.Total,
                List = Mapper.Map<List<AccountDto>>(result.Data)
            });
        }
    }
}
