//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 04/25/2019 17:08:32 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Project.Core.Utility;
using Project.IBLL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;
using Project.WebApi.Filters;
using Microsoft.AspNetCore.Cors;
using NPOI.XWPF.UserModel;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;

namespace Project.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/word")]
    [EnableCors("any")]
    public class WordController : Controller
    {
        private readonly IWordService _wordService;
        private readonly IHostingEnvironment _hostingEnvironment;
        private IConfiguration _configuration;

        public WordController(IWordService wordService, IHostingEnvironment hostingEnvironment, IConfiguration configuration)
        {
            this._hostingEnvironment = hostingEnvironment;
            _configuration = configuration;
            _wordService = wordService;
        }

        [HttpGet("{id}")]
        public IActionResult GetByPk(int id)
        {
            var model = _wordService.GetByPk(id);
            return Ok(Mapper.Map<WordDto>(model));
        }

        /// <summary>
        ///     添加word
        /// </summary>
        /// <param name="wordDto">实体</param>
        /// <returns></returns>
        [HttpPost("")]
        [Validate]
        public IActionResult Insert([FromBody] WordDto wordDto)
        {
            var word = Mapper.Map<Word>(wordDto);
            var time = DateTime.Now.ToString("yyyyMMddhhmmss");
            NpoiHeplper.Init(_configuration["Template"], $@"{_configuration["UploadPath"]}{time}.docx");
            word.RemotePath = $"{_configuration["Host"]}{time}.docx";
            word.LocalPath = $"{_configuration["UploadPath"]}{time}.docx";
            return Ok(_wordService.Insert(word));
        }

        /// <summary>
        ///     更新word
        /// </summary>
        /// <param name="id">主键</param>
        /// <param name="wordDto">实体</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        [Validate]
        public IActionResult Update(int id, [FromBody] WordDto wordDto)
        {
            var model = Mapper.Map<Word>(wordDto);
            var result = _wordService.Update(model);
            return Ok();
        }

        /// <summary>
        ///     逻辑删除word
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var result = _wordService.SoftDelete(id);
            return Ok();
        }

        /// <summary>
        ///     逻辑删除word
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpGet("upload/{id}")]
        public IActionResult Upload(int id)
        {
            var word = _wordService.GetByPk(id);
            word.Status = 1;
            _wordService.Update(word);
            return Ok();
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pi"></param>
        /// <param name="ps"></param>
        /// <param name="condition"></param>
        [HttpGet("get_by_page")]
        public IActionResult GetByPage(int pi, int ps, WordCondition condition = null)
        {
            var result = _wordService.GetByPage(pi, ps, null, condition);
            return Ok(new
            {
                Total = result.Total,
                List = Mapper.Map<List<WordDto>>(result.Data)
            });
        }
    }
}
