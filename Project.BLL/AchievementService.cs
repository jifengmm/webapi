//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 05/23/2019 10:37:27 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Project.IBLL;
using Project.IDAL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.BLL
{
    public class AchievementService : IAchievementService
    {
        private readonly IUnitOfWork _unitOfWork;

        public AchievementService(IAchievementManage achievementManage, IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        ///     新增Achievement
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int Insert(Achievement entity)
        {
            return _unitOfWork.AchievementManage.Insert(entity);
        }

        /// <summary>
        ///     批量新增Achievement
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Insert(List<Achievement> entitys)
        {
            return _unitOfWork.AchievementManage.InsertWithNoTran(entitys);
        }

        /// <summary>
        ///     更新Achievement
        /// </summary>
        /// <returns></returns>
        public bool Update(Achievement entity)
        {
            return _unitOfWork.AchievementManage.Update(entity);
        }

        /// <summary>
        ///     批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Update(List<Achievement> entitys)
        {
            return _unitOfWork.AchievementManage.UpdateWithNoTran(entitys);
        }

        /// <summary>
        ///     逻辑删除Achievement
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool SoftDelete(int id)
        {
            return _unitOfWork.AchievementManage.SoftDelete(id);
        }

        /// <summary>
        ///     批量逻辑删除Achievement(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public bool SoftDelete(List<int> ids)
        {
            return _unitOfWork.AchievementManage.SoftDeleteWithNoTran(ids);
        }

        /// <summary>
        ///     判断Achievement是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Exists(int id)
        {
            return _unitOfWork.AchievementManage.Exists(id);
        }

        /// <summary>
        ///     根据主键获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Achievement GetByPk(int id)
        {
            return _unitOfWork.AchievementManage.GetByPk(id);
        }

        /// <summary>
        ///     根据主键获取实体集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<Achievement> GetList(List<int> ids)
        {
            return _unitOfWork.AchievementManage.GetList(ids);
        }

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        public PageModel<Achievement> GetByPage(int page, int size, string sort, AchievementCondition condition)
        {
            var dbCondition = new List<DbCondition<Achievement>>();
            return _unitOfWork.AchievementManage.GetByPage(page, size, sort, dbCondition);
        }
    }
}
