//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 05/27/2019 13:55:17 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Project.IBLL;
using Project.IDAL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.BLL
{
    public class AppointmentService : IAppointmentService
    {
        private readonly IUnitOfWork _unitOfWork;

        public AppointmentService(IAppointmentManage appointmentManage, IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        ///     新增Appointment
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int Insert(Appointment entity)
        {
            return _unitOfWork.AppointmentManage.Insert(entity);
        }

        /// <summary>
        ///     批量新增Appointment
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Insert(List<Appointment> entitys)
        {
            return _unitOfWork.AppointmentManage.InsertWithNoTran(entitys);
        }

        /// <summary>
        ///     更新Appointment
        /// </summary>
        /// <returns></returns>
        public bool Update(Appointment entity)
        {
            return _unitOfWork.AppointmentManage.Update(entity);
        }

        /// <summary>
        ///     批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Update(List<Appointment> entitys)
        {
            return _unitOfWork.AppointmentManage.UpdateWithNoTran(entitys);
        }

        /// <summary>
        ///     逻辑删除Appointment
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool SoftDelete(int id)
        {
            return _unitOfWork.AppointmentManage.SoftDelete(id);
        }

        /// <summary>
        ///     批量逻辑删除Appointment(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public bool SoftDelete(List<int> ids)
        {
            return _unitOfWork.AppointmentManage.SoftDeleteWithNoTran(ids);
        }

        /// <summary>
        ///     判断Appointment是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Exists(int id)
        {
            return _unitOfWork.AppointmentManage.Exists(id);
        }

        /// <summary>
        ///     根据主键获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Appointment GetByPk(int id)
        {
            return _unitOfWork.AppointmentManage.GetByPk(id);
        }

        /// <summary>
        ///     根据主键获取实体集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<Appointment> GetList(List<int> ids)
        {
            return _unitOfWork.AppointmentManage.GetList(ids);
        }

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        public PageModel<Appointment> GetByPage(int page, int size, string sort, AppointmentCondition condition)
        {
            var aa = DateTime.Now.Date;

            var dbCondition = new List<DbCondition<Appointment>>()
            {
                new DbCondition<Appointment>{
                    IsWhere = condition.AppointmentDate.HasValue,
                    Expression = o => o.AppointmentDate.Date  == condition.AppointmentDate.Value.Date
                },
            };

            var ret = _unitOfWork.AppointmentManage.GetByPage(page, size, sort, dbCondition);

            if (ret.Total == 0)
            {
                AddAppointmentsByDate(condition.AppointmentDate.GetValueOrDefault());
                ret = _unitOfWork.AppointmentManage.GetByPage(page, size, sort, dbCondition);
            }

            return ret;
        }

        public bool AddAppointmentsByDate(DateTime AppointmentDate)
        {
            //循环员工表，循环添加当天预约数据 todo
            _unitOfWork.AppointmentManage.Insert(new Appointment
            {
                AppointmentDate = AppointmentDate,
                AppointmentTimeId = 0,
                AppointmentTimeName = "",
                AppointmentCustomerName = "",
                AppointmentProjectId = 0,
                AppointmentProjectName = "",
                Remarks = "",
            });

            return true;
        }
    }
}
