//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 04/25/2019 17:08:32 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Project.IBLL;
using Project.IDAL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.BLL
{
    public class WordService : IWordService
    {
        private readonly IUnitOfWork _unitOfWork;

        public WordService(IWordManage wordManage, IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        ///     新增Word
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int Insert(Word entity)
        {
            return _unitOfWork.WordManage.Insert(entity);
        }

        /// <summary>
        ///     批量新增Word
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Insert(List<Word> entitys)
        {
            return _unitOfWork.WordManage.InsertWithNoTran(entitys);
        }

        /// <summary>
        ///     更新Word
        /// </summary>
        /// <returns></returns>
        public bool Update(Word entity)
        {
            return _unitOfWork.WordManage.Update(entity);
        }

        /// <summary>
        ///     批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Update(List<Word> entitys)
        {
            return _unitOfWork.WordManage.UpdateWithNoTran(entitys);
        }

        /// <summary>
        ///     逻辑删除Word
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool SoftDelete(int id)
        {
            return _unitOfWork.WordManage.SoftDelete(id);
        }

        /// <summary>
        ///     批量逻辑删除Word(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public bool SoftDelete(List<int> ids)
        {
            return _unitOfWork.WordManage.SoftDeleteWithNoTran(ids);
        }

        /// <summary>
        ///     判断Word是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Exists(int id)
        {
            return _unitOfWork.WordManage.Exists(id);
        }

        /// <summary>
        ///     根据主键获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Word GetByPk(int id)
        {
            return _unitOfWork.WordManage.GetByPk(id);
        }

        /// <summary>
        ///     根据主键获取实体集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<Word> GetList(List<int> ids)
        {
            return _unitOfWork.WordManage.GetList(ids);
        }

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        public PageModel<Word> GetByPage(int page, int size, string sort, WordCondition condition)
        {
            var dbCondition = new List<DbCondition<Word>>
            {
                new DbCondition<Word>
                {
                    IsWhere = !string.IsNullOrEmpty(condition.Keyword),
                    Expression = o=>o.Name.Contains(condition.Keyword)
                },
                new DbCondition<Word>
                {
                    IsWhere = condition.Start.HasValue,
                    Expression = o=>o.AddTime>=condition.Start.Value
                },
                new DbCondition<Word>
                {
                    IsWhere = condition.End.HasValue,
                    Expression = o=>o.AddTime<=condition.End.Value.AddDays(1)
                },
                new DbCondition<Word>
                {
                    IsWhere = condition.Type>0,
                    Expression = o=>o.Type == condition.Type
                }
            };
            return _unitOfWork.WordManage.GetByPage(page, size, sort, dbCondition);
        }
    }
}
