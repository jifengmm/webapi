//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 03/21/2019 08:57:52 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Project.IBLL;
using Project.IDAL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.BLL
{
    public class AccountService : IAccountService
    {
        private readonly IUnitOfWork _unitOfWork;

        public AccountService(IAccountManage accountManage, IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        ///     新增Account
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int Insert(Account entity)
        {
            return _unitOfWork.AccountManage.Insert(entity);
        }

        /// <summary>
        ///     批量新增Account
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Insert(List<Account> entitys)
        {
            return _unitOfWork.AccountManage.InsertWithNoTran(entitys);
        }

        /// <summary>
        ///     更新Account
        /// </summary>
        /// <returns></returns>
        public bool Update(Account entity)
        {
            return _unitOfWork.AccountManage.Update(entity);
        }

        /// <summary>
        ///     批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Update(List<Account> entitys)
        {
            return _unitOfWork.AccountManage.UpdateWithNoTran(entitys);
        }

        /// <summary>
        ///     逻辑删除Account
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool SoftDelete(int id)
        {
            return _unitOfWork.AccountManage.SoftDelete(id);
        }

        /// <summary>
        ///     批量逻辑删除Account(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public bool SoftDelete(List<int> ids)
        {
            return _unitOfWork.AccountManage.SoftDeleteWithNoTran(ids);
        }

        /// <summary>
        ///     判断Account是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Exists(int id)
        {
            return _unitOfWork.AccountManage.Exists(id);
        }

        /// <summary>
        ///     根据主键获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public Account GetByPk(int id)
        {
            return _unitOfWork.AccountManage.GetByPk(id);
        }

        /// <summary>
        ///     根据主键获取实体集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<Account> GetList(List<int> ids)
        {
            return _unitOfWork.AccountManage.GetList(ids);
        }

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        public PageModel<Account> GetByPage(int page, int size, string sort, AccountCondition condition)
        {
            var dbCondition = new List<DbCondition<Account>>();
            if (!string.IsNullOrEmpty(condition.Keyword))
            {
                var cd = new DbCondition<Account>()
                {
                    IsWhere = true,
                    Expression = o => o.LoginName.ToLower().Contains(condition.Keyword.ToLower()) ||
                                    o.EmployeeName.Contains(condition.Keyword)
                };
                dbCondition.Add(cd);
            }
            return _unitOfWork.AccountManage.GetByPage(page, size, sort, dbCondition);
        }

        /// <summary>
        /// 判断LoginName是否存在
        /// </summary>
        /// <param name="loginName"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool ExistLoginName(string loginName, int? id)
        {
            return _unitOfWork.AccountManage.ExistLoginName(loginName, id);
        }

        /// <summary>
        /// 根据loginName和password获取账号
        /// </summary>
        /// <param name="loginName"></param>
        /// <param name="password"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public Account GetAccount(string loginName, string password)
        {
            return _unitOfWork.AccountManage.GetAccount(loginName, password);
        }
    }
}
