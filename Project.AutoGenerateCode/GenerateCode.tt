<#@ template debug="true" hostSpecific="true" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Xml" #>  
<#@ assembly name="$(SolutionDir)\Project.AutoGenerateCode\lib\SqlSugar.dll" #>
<#@ assembly name="$(SolutionDir)\Project.AutoGenerateCode\lib\Newtonsoft.Json.dll" #>  
<#@ assembly name="$(SolutionDir)\Project.AutoGenerateCode\lib\MySql.Data.dll" #>  
<#@ assembly name="$(SolutionDir)\Project.AutoGenerateCode\lib\Oracle.ManagedDataAccess.dll" #>  
<#@ assembly name="$(SolutionDir)\Project.AutoGenerateCode\lib\System.Data.SQLite.dll" #>  
<#@ import namespace="SqlSugar" #>  

//批量生成文件 By 朱峰
<#@include file="$(SolutionDir)\Project.AutoGenerateCode\MultipleOutputHelper.ttinclude"#> 
<#
	//读取配置文件
	XmlDocument xDoc = new XmlDocument();
	xDoc.Load(Host.ResolvePath("GenerateConfig.xml"));
	var root=xDoc.SelectSingleNode("Dbs");
	var list=new List<string>();
	var manager = Manager.Create(Host, GenerationEnvironment);
	foreach(XmlNode db in root.ChildNodes){
	var type=db.Attributes["Type"].InnerText;
	var connectString=db.Attributes["ConnectString"].InnerText;
	var dbType=DbType.MySql;
	if(type=="sql"){
		dbType=DbType.SqlServer;
    }
	else if(type=="oracle"){
		dbType=DbType.Oracle;
    }
	var _db=new SqlSugarClient(new ConnectionConfig
                {
                    ConnectionString = connectString,
                    DbType = dbType,
                    IsAutoCloseConnection = true,
                    InitKeyType = InitKeyType.SystemTable
                });
	
	foreach (XmlNode table in db.ChildNodes){
	//表原名
	var tableMame=table.InnerText;
	//实体名
	var name=table.Attributes["ClassName"].InnerText;
	if(string.IsNullOrEmpty(name)){
		name=tableMame;
    }
	list.Add(name);
	var lName=name.Substring(0,1).ToLower()+name.Substring(1);
	//MODEL
	_db.IgnoreColumns.Add("AddUser", name);
	_db.IgnoreColumns.Add("AddTime", name);
	_db.IgnoreColumns.Add("UpdateUser", name);
	_db.IgnoreColumns.Add("UpdateTime", name);
	_db.IgnoreColumns.Add("Marks", name);
	if(tableMame!=name){
		_db.MappingTables.Add(name,tableMame);
    }
	_db.MappingColumns.Add("Id", "ID", name);
	var content = _db.DbFirst
                    .SettingClassTemplate(old => @"{using}
namespace Project.Model
{
{ClassDescription}{SugarTable}
    public class {ClassName}:BaseField
    {
    {PropertyName}
    }
}")
                    .SettingNamespaceTemplate(old =>
                    {
                        return old;
                    })
                    .SettingPropertyDescriptionTemplate(old => @"
           /// <summary>
           /// Desc_New:{PropertyDescription}
           /// Default_New:{DefaultValue}
           /// Nullable_New:{IsNullable}
           /// </summary>"
                    ).IsCreateAttribute().Where(tableMame).ToClassStringList()[name];
	var dicName=Path.GetDirectoryName(Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.Model"));
	var fileName=name+".cs";
	var fullName=Path.Combine(dicName, fileName);
	manager.CreateFile(fullName,content);
	
	//dto
	manager.StartNewFile(name+"Condition.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.Model//Conditions"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.Model.Conditions
{
    public class <#= name #>Condition
    {
    }
}
<#
				manager.EndBlock();
				//condition
				manager.StartNewFile(name+"Dto.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.Model//Dtos"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Project.Model.Dtos
{
    public class <#= name #>Dto
    {
    }
}
<#
				manager.EndBlock();
				//IDAL
				manager.StartNewFile("I"+name+"Manage.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.IDAL"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------
using Project.Model;

namespace Project.IDAL
{
    public interface I<#= name #>Manage : IManageBase<<#= name #>>
    {
    }
}

<#
				manager.EndBlock();
				//DAL生成
				manager.StartNewFile(name+"Manage.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.DAL"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using Project.IDAL;
using Project.Model;
using SqlSugar;

namespace Project.DAL
{
    public class <#= name #>Manage : ManageBase<<#= name #>>,I<#= name #>Manage
    {
<#if(type=="mysql"){#>
		public <#= name #>Manage()
		{
		}
<#}#>
<#if(type=="sql"){#>
		public <#= name #>Manage() : base(DbType.SqlServer)
		{
		}
<#}#>
<#if(type=="oracle"){#>
		public <#= name #>Manage() : base(DbType.Oracle)
		{
		}
<#}#>
	}
}
<#
				manager.EndBlock();
				//IBLL
				manager.StartNewFile("I"+name+"Service.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.IBLL"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.IBLL
{
    public interface I<#= name #>Service
    {
        /// <summary>
        /// 新增<#= name #>
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        int Insert(<#= name #> entity);

        /// <summary>
        ///     批量新增<#= name #>
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        bool Insert(List<<#= name #>> entitys);

        /// <summary>
        /// 更新产品
        /// </summary>
        /// <returns></returns>
        bool Update(<#= name #> entity);

        /// <summary>
        /// 批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        bool Update(List<<#= name #>> entitys);

        /// <summary>
        /// 逻辑删除<#= name #>
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        bool SoftDelete(int id);

        /// <summary>
        /// 批量逻辑删除<#= name #>(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        bool SoftDelete(List<int> ids);

        /// <summary>
        /// 判断<#= name #>是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        bool Exists(int id);

        /// <summary>
        ///     根据主键获取<#= name #>
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        <#= name #> GetByPk(int id);

        /// <summary>
        ///     根据主键获取<#= name #>集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        List<<#= name #>> GetList(List<int> ids);

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        PageModel<<#= name #>> GetByPage(int page, int size, string sort, <#= name #>Condition condition);
    }
}
<#
				manager.EndBlock();
				//BLL
				manager.StartNewFile(name+"Service.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.BLL"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Project.IBLL;
using Project.IDAL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;

namespace Project.BLL
{
    public class <#= name #>Service : I<#= name #>Service
    {
        private readonly IUnitOfWork _unitOfWork;

        public <#= name #>Service(I<#= name #>Manage <#= name.Substring(0,1).ToLower()+name.Substring(1) #>Manage, IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        ///     新增<#= name #>
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public int Insert(<#= name #> entity)
        {
            return _unitOfWork.<#= name #>Manage.Insert(entity);
        }

        /// <summary>
        ///     批量新增<#= name #>
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Insert(List<<#= name #>> entitys)
        {
            return _unitOfWork.<#= name #>Manage.InsertWithNoTran(entitys);
        }

        /// <summary>
        ///     更新<#= name #>
        /// </summary>
        /// <returns></returns>
        public bool Update(<#= name #> entity)
        {
            return _unitOfWork.<#= name #>Manage.Update(entity);
        }

        /// <summary>
        ///     批量更新(不使用事务)
        /// </summary>
        /// <param name="entitys"></param>
        /// <returns></returns>
        public bool Update(List<<#= name #>> entitys)
        {
            return _unitOfWork.<#= name #>Manage.UpdateWithNoTran(entitys);
        }

        /// <summary>
        ///     逻辑删除<#= name #>
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool SoftDelete(int id)
        {
            return _unitOfWork.<#= name #>Manage.SoftDelete(id);
        }

        /// <summary>
        ///     批量逻辑删除<#= name #>(不使用事务)
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public bool SoftDelete(List<int> ids)
        {
            return _unitOfWork.<#= name #>Manage.SoftDeleteWithNoTran(ids);
        }

        /// <summary>
        ///     判断<#= name #>是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool Exists(int id)
        {
            return _unitOfWork.<#= name #>Manage.Exists(id);
        }

        /// <summary>
        ///     根据主键获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public <#= name #> GetByPk(int id)
        {
            return _unitOfWork.<#= name #>Manage.GetByPk(id);
        }

        /// <summary>
        ///     根据主键获取实体集合
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        public List<<#= name #>> GetList(List<int> ids)
        {
            return _unitOfWork.<#= name #>Manage.GetList(ids);
        }

        /// <summary>
        ///     分页方法
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        public PageModel<<#= name #>> GetByPage(int page, int size, string sort, <#= name #>Condition condition)
        {
            var dbCondition = new List<DbCondition<<#= name #>>>();
            return _unitOfWork.<#= name #>Manage.GetByPage(page, size, sort, dbCondition);
        }
    }
}
<#
				manager.EndBlock();
				//CONTROLLER
				manager.StartNewFile(name+"Controller.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.WebApi\\Controllers"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Project.Core.Utility;
using Project.IBLL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;
using Project.WebApi.Filters;
using Microsoft.AspNetCore.Cors;

namespace Project.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/<#= name.ToLower() #>")]
    [EnableCors("any")]
    public class <#= name #>Controller : Controller
    {
        private readonly I<#= name #>Service _<#= lName #>Service;

        public <#= name #>Controller(I<#= name #>Service <#= lName #>Service)
        {
            _<#= lName #>Service = <#= lName #>Service;
        }

        /// <summary>
        ///     根据id获取
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public IActionResult GetByPk(int id)
        {
            var model = _<#= lName #>Service.GetByPk(id);
            return Ok(Mapper.Map<<#= name #>Dto>(model));
        }

        /// <summary>
        ///     添加<#= name #>
        /// </summary>
        /// <param name="<#= lName #>Dto">实体</param>
        /// <returns></returns>
        [HttpPost("")]
        [Validate]
        public IActionResult Insert([FromBody] <#= name #>Dto <#= lName #>Dto)
        {
            var <#= lName #> = Mapper.Map<<#= name #>>(<#= lName #>Dto);
            return Ok(_<#= lName #>Service.Insert(<#= lName #>));
        }

        /// <summary>
        ///     更新<#= name #>
        /// </summary>
        /// <param name="id">主键</param>
        /// <param name="<#= lName #>Dto">实体</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        [Validate]
        public IActionResult Update(int id, [FromBody] <#= name #>Dto <#= lName #>Dto)
        {
            var model = Mapper.Map<<#= name #>>(<#= lName #>Dto);
            var result = _<#= lName #>Service.Update(model);
            return Ok();
        }

        /// <summary>
        ///     逻辑删除<#= lName #>
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var result = _<#= lName #>Service.SoftDelete(id);
            return Ok();
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pi"></param>
        /// <param name="ps"></param>
        /// <param name="condition"></param>
        [HttpGet("get_by_page")]
        public IActionResult GetByPage(int pi, int ps, <#= name #>Condition condition = null)
        {
            var result = _<#= lName #>Service.GetByPage(pi, ps, null, condition);
            return Ok(new
            {
                Total = result.Total,
                List = Mapper.Map<List<<#= name #>Dto>>(result.Data)
            });
        }
    }
}
<#
				manager.EndBlock();
				//TEST
				manager.StartNewFile(name+"Test.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.UnitTest"));
#>
using System.Collections.Generic;
using Project.DAL;
using Project.Model;
using SqlSugar;
using Xunit;

namespace Project.UnitTest
{
    public class <#= name #>Test : BaseTest
    {
        /// <summary>
        ///     服务
        /// </summary>
        public Manage<#= name #> Manage<#= name #>Service = new Manage<#= name #>();

        public class Manage<#= name #> : ManageBase<<#= name #>>
        {
<#if(type=="mysql"){#>
			public Manage<#= name #>()
			{
				Db.CurrentConnectionConfig = new ConnectionConfig
				{
					ConnectionString = MySqlConnectionString,
				};
			}
<#}#>
<#if(type=="sql"){#>
			public Manage<#= name #>() : base(DbType.SqlServer)
			{
				Db.CurrentConnectionConfig = new ConnectionConfig
				{
					ConnectionString = SqlConnectionString,
					DbType = DbType.SqlServer
				};
			}
<#}#>
<#if(type=="oracle"){#>
			public Manage<#= name #>() : base(DbType.Oracle)
			{
				Db.CurrentConnectionConfig = new ConnectionConfig
				{
					ConnectionString = OracleConnectionString,
					DbType = DbType.Oracle
				};
			}
<#}#>
		}

		[Fact(DisplayName = "新增<#= name #>")]
        public void Insert()
        {
            var result = Manage<#= name #>Service.Insert(new <#= name #>());
            Assert.True(result > 0);
        }

		[Fact(DisplayName = "批量新增<#= name #>")]
        public void BulkInsert()
        {
            var result = Manage<#= name #>Service.InsertWithNoTran(new List<<#= name #>>
            {
                new <#= name #>()
            });
            Assert.True(result);
        }

        [Fact(DisplayName = "批量删除<#= name #>")]
        public void BulkDelete()
        {
            var result = Manage<#= name #>Service.SoftDeleteWithNoTran(new List<int> {1, 2});
            Assert.True(result);
        }

        [Fact(DisplayName = "逻辑删除<#= name #>")]
        public void Delete()
        {
            var result = Manage<#= name #>Service.SoftDelete(1);
            Assert.True(result);
        }

        [Fact(DisplayName = "<#= name #>是否存在")]
        public void Exists()
        {
            var result = Manage<#= name #>Service.Exists(1);
            Assert.True(result);
        }

        [Fact(DisplayName = "分页查询<#= name #>")]
        public void GetByPage()
        {
            var result = Manage<#= name #>Service.GetByPage(1, 10, "addTime desc", new List<DbCondition<<#= name #>>>());
            Assert.True(result.Total > 0);
        }

        [Fact(DisplayName = "根据Id获取<#= name #>")]
        public void GetByPk()
        {
            var result = Manage<#= name #>Service.GetByPk(1);
            Assert.True(result.Id > 0);
        }

        [Fact(DisplayName = "根据Id集合获取<#= name #>列表")]
        public void GetList()
        {
            var result = Manage<#= name #>Service.GetList(new List<int> {1, 2});
            Assert.True(result.Count > 0);
        }
    }
}
<#
	manager.EndBlock();
	}
	}

	//IUnitOfWork
	manager.StartNewFile("IUnitOfWork.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.IDAL"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project.IDAL
{
    public interface IUnitOfWork
    {
<#foreach(var item in list){#>

        I<#= item #>Manage <#= item #>Manage { get; set; }
<#}#>
    }
}
<#
	manager.EndBlock();
	//UnitOfWork
	manager.StartNewFile("UnitOfWork.cs",Host.TemplateFile.Replace("Project.AutoGenerateCode","Project.DAL"));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 <#= DateTime.Now #> By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using Project.IDAL;

namespace Project.DAL
{
    public class UnitOfWork:IUnitOfWork
    {
<#foreach(var item in list){#>

        public I<#= item #>Manage <#= item #>Manage { get; set; }
<#}#>
    }
}
<#
	manager.EndBlock();
	//执行
	manager.Process(true);
#> 


